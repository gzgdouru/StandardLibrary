  UnitTest.cpp
d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1468): warning C4244: “return”: 从“float”转换到“int”，可能丢失数据
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(213): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoke_ret<_Rx,_Callable&,_Ty>(std::_Forced<_Rx,false>,_Callable &,_Ty &&)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed,
              _Ty=std::ios_base::iostate
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(211): note: 编译类 模板 成员函数“int std::_Func_impl<_Decayed,_Alloc,_Ret,int>::_Do_call(int &&)”时
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=int
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(137): note: 参见对正在编译的类 模板 实例化“std::_Func_impl<_Decayed,_Alloc,_Ret,int>”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=int
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(348): note: 参见对正在编译的类 模板 实例化“std::_Is_large<_Myimpl>”的引用
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(327): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,int>::_Reset_alloc<_Ty,std::allocator<int>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=int,
              _Ty=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Alloc=std::allocator<int>
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(327): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,int>::_Reset_alloc<_Ty,std::allocator<int>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=int,
              _Ty=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Alloc=std::allocator<int>
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(498): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,int>::_Reset<std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>>(_Fx &&)”的引用
          with
          [
              _Ret=int,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(498): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,int>::_Reset<std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>>(_Fx &&)”的引用
          with
          [
              _Ret=int,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>
          ]
  f:\cplusplus\standardlibrary\functors\fopow.hpp(26): note: 参见对正在编译的函数 模板 实例化“std::function<int (int)>::function<std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,float,void>(_Fx)”的引用
          with
          [
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>
          ]
  f:\cplusplus\standardlibrary\functors\fopow.hpp(26): note: 参见对正在编译的函数 模板 实例化“std::function<int (int)>::function<std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,float,void>(_Fx)”的引用
          with
          [
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>
          ]
d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1376): warning C4244: “参数”: 从“std::ios_base::iostate”转换到“float”，可能丢失数据
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1444): note: 参见对正在编译的函数 模板 实例化“T1 std::_Invoker_functor::_Call<_Cv_FD&,_Ty,int&>(_Callable,_Ty &&,int &)”的引用
          with
          [
              T1=float,
              _Cv_FD=fopow<float,int>,
              _Ty=std::ios_base::iostate,
              _Callable=fopow<float,int> &
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1475): note: 参见对正在编译的函数 模板 实例化“T1 std::invoke<_Cv_FD&,_Ty,int&>(_Callable,_Ty &&,int &)”的引用
          with
          [
              T1=float,
              _Cv_FD=fopow<float,int>,
              _Ty=std::ios_base::iostate,
              _Callable=fopow<float,int> &
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(826): note: 参见对正在编译的函数 模板 实例化“T1 std::_Invoke_ret<_Cv_FD&,_Ty,_Cv_TiD&>(std::_Forced<std::_Unforced,false>,_Cv_FD &,_Ty &&,_Cv_TiD &)”的引用
          with
          [
              T1=float,
              _Cv_FD=fopow<float,int>,
              _Ty=std::ios_base::iostate,
              _Cv_TiD=int
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(881): note: 参见对正在编译的函数 模板 实例化“T1 std::_Call_binder<std::_Unforced,0,1,_Ty1,_Ty2,std::tuple<_Ty &&>>(std::_Forced<std::_Unforced,false>,std::integer_sequence<unsigned int,0,1>,_Cv_FD &,_Cv_tuple_TiD &,_Untuple &&)”的引用
          with
          [
              T1=float,
              _Ty1=fopow<float,int>,
              _Ty2=std::tuple<std::_Ph<1>,int>,
              _Ty=std::ios_base::iostate,
              _Cv_FD=fopow<float,int>,
              _Cv_tuple_TiD=std::tuple<std::_Ph<1>,int>,
              _Untuple=std::tuple<std::ios_base::iostate &&>
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1376): note: 参见对正在编译的函数 模板 实例化“T1 std::_Binder<std::_Unforced,fopow<T1,int>,const std::_Ph<1> &,int>::operator ()<_Ty>(_Ty &&)”的引用
          with
          [
              T1=float,
              _Ty=std::ios_base::iostate
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1375): note: 参见对正在编译的函数 模板 实例化“T1 std::_Binder<std::_Unforced,fopow<T1,int>,const std::_Ph<1> &,int>::operator ()<_Ty>(_Ty &&)”的引用
          with
          [
              T1=float,
              _Ty=std::ios_base::iostate
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1444): note: 参见对正在编译的函数 模板 实例化“T1 std::_Invoker_functor::_Call<_Fx&,_Ty>(_Callable,_Ty &&)”的引用
          with
          [
              T1=float,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Ty=std::ios_base::iostate,
              _Callable=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int> &
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits(1468): note: 参见对正在编译的函数 模板 实例化“T1 std::invoke<_Fx&,_Ty>(_Callable,_Ty &&)”的引用
          with
          [
              T1=float,
              _Fx=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int>,
              _Ty=std::ios_base::iostate,
              _Callable=std::_Binder<std::_Unforced,fopow<float,int>,const std::_Ph<1> &,int> &
          ]
  d:\program files (x86)\microsoft visual studio 14.0\vc\include\functional(213): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoke_ret<_Rx,_Callable&,_Ty>(std::_Forced<_Rx,false>,_Callable &,_Ty &&)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed,
              _Ty=std::ios_base::iostate
          ]
  functors.vcxproj -> F:\cplusplus\StandardLibrary\Debug\functors.exe
  functors.vcxproj -> F:\cplusplus\StandardLibrary\Debug\functors.pdb (Full PDB)
